---
- name: Create directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ adm_user }}"
    group: "{{ adm_group }}"
    mode: '0755'
  loop:
    - "{{ app_home_dir }}"
    - "{{ jenkins_home }}"
    - "{{ jenkins_home }}/casc_configs"
    - "{{ jenkins_data }}"

- name: Create directories for Flyway
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ adm_user }}"
    group: "{{ adm_group }}"
    mode: '0755'
  loop:
    - "{{ flyway_data }}"
    - "{{ flyway_data_kos }}"
  when: use_flyway | bool

- name: Create AWS directory
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ adm_user }}"
    group: "{{ adm_group }}"
    mode: '0700'
  loop:
    - "{{ jenkins_home }}/.aws/"
  when: use_aws

- name: Create and populate AWS Config file
  ansible.builtin.blockinfile:
    path: "{{ jenkins_home }}/.aws/config"
    create: yes
    mode: '0600'
    block: |
      [profile {{ aws_profile }}]
      region = ap-northeast-2
      output = json
  register: result

- name: Create and populate AWS Credentials file
  ansible.builtin.blockinfile:
    path: "{{ jenkins_home }}/.aws/credentials"
    create: yes
    mode: '0600'
    block: |
      [{{ aws_profile }}]
      aws_access_key_id = {{ enc_access_key }}
      aws_secret_access_key = {{ enc_secret_access_key }}
  when: enc_access_key is defined and enc_secret_access_key is defined

- name: Create ArgoCD directory
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ adm_user }}"
    group: "{{ adm_group }}"
    mode: '0755'
    force: false
  loop:
    - "{{ jenkins_home }}/argocd/"
  when: use_argocd | bool

- name: Create ArgoCD config file
  ansible.builtin.file:
    path: "{{ item }}"
    state: touch
    mode: '0600'
  loop:
    - "{{ jenkins_home }}/argocd/config"
  when: use_argocd | bool

- name: Create Kubeconfig file
  ansible.builtin.file:
    path: "{{ item }}"
    state: touch
    mode: '0600'
  loop:
    - "{{ jenkins_home }}/kubeconfig"
  when: use_kubeconfig | bool

- name: Create SSH directory
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ adm_user }}"
    group: "{{ adm_group }}"
    mode: '0700'
  loop:
    - "{{ jenkins_home }}/.ssh/"
  when: use_ssh | bool

- name: Create SSH key files
  ansible.builtin.file:
    path: "{{ item }}"
    state: touch
    mode: '0600'
  loop:
    - "{{ jenkins_home }}/.ssh/id_rsa"
    - "{{ jenkins_home }}/.ssh/id_rsa.pub"
  when: use_ssh | bool

- name: Copy files
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ adm_user }}"
    group: "{{ adm_group }}"
    mode: '0644'
    backup: true
  loop:
    - { src: '.env.j2', dest: '{{ jenkins_home }}/.env' }
    - { src: 'docker-compose.yml.j2', dest: '{{ jenkins_home }}/docker-compose.yml' }
    - { src: 'gitconfig.j2', dest: '{{ jenkins_home }}/gitconfig' }
    - { src: 'settings.xml.j2', dest: '{{ jenkins_home }}/settings.xml' }

- name: Install Docker SDK for Python
  ansible.builtin.pip:
    name: docker
    state: present
  when: ansible_pkg_mgr != "pacman"
  ignore_errors: true

- name: Log into docker server
  community.docker.docker_login:
    # registry_url: "{{ image_registry_server }}"
    username: "{{ dkr_username }}"
    password: "{{ dkr_passwd }}"
    reauthorize: true
  when: docker_type != 'ghcr.io'

- name: Login to docker [ghcr.io]
  ansible.builtin.shell: echo {{ dkr_passwd }} | docker login ghcr.io -u {{ dkr_username }} --password-stdin
  when: docker_type == 'ghcr.io'

- name: Pull jenkins image from {{ image_registry_server }}
  community.docker.docker_image:
    name: "{{ image_registry_server }}/{{ jenkins_image }}:{{ jenkins_ver }}"
    source: pull
    pull:
      platform: amd64
  when: image_registry_server2 is defined

- name: Tag jenkins image
  community.docker.docker_image:
    name: "{{ image_registry_server }}/{{ jenkins_image }}:{{ jenkins_ver }}"
    repository: "{{ image_registry_server2 }}/{{ jenkins_image }}:{{ jenkins_ver }}"
    push: "{{ push_image | bool }}"
    source: local
  when:
    - image_registry_server2 is defined
    - tag_image | bool
  register: result
  ignore_errors: true

- name: Print variables
  ansible.builtin.debug:
    var: result

- name: Restart jenkins
  ansible.builtin.meta: flush_handlers
  notify: Restart jenkins
